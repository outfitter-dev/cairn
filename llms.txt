# Waymark

> Waymark provides a universal pattern (`:::`) that makes codebases AI-navigable and grep-friendly. Drop tiny, searchable waymarks in comments so AI agents and developers can instantly navigate to the right spot in any codebase.

## Core Concept

Waymarks are unique, searchable markers placed in code comments using the pattern `marker ::: content`. The canonical waymark uses the `:::` sign (three colons) preceded by a space when a marker is present. Waymarks can contain markers, tags, actors (@mentions), and anchors.

Key principles:
- **One sign per project** - Maintain consistency with `:::` across your codebase
- **Visual clarity** - The `:::` sign clearly separates marker from content
- **Progressive adoption** - Start with simple markers, expand as needed
- **AI-first design** - Optimized for LLM navigation and understanding

## Essential Patterns

### Basic Usage
```javascript
// todo ::: implement validation
// notice ::: check user permissions #security
// note ::: assumes UTC timestamps
// todo ::: @agent write unit tests
// -temp ::: remove after v2.0
```

### With Signals and Tags
```python
# !todo ::: validate inputs #security          # High priority via signal
# fixme ::: @alice memory leak #critical       # fix → fixme in v1.0
```

### Pure Notes (no marker)
```python
# note ::: all user emails must be unique in database
# important ::: this code is performance-critical #hotpath
# deprecated ::: use newMethod() instead #until:v2.0
```

### Searching
```bash
rg ":::"              # All waymarks
rg "notice :::"       # Notices (replaces warn)
rg ":::.*@agent"      # AI tasks

# Context searching (find related waymarks)
rg -B1 -A1 "notice :::"    # Show 1 line before/after
rg -C2 "todo :::"          # Show 2 lines context
rg -B2 -A2 "fixme :::"     # fix → fixme in v1.0
```

## Marker Reference (v1.0 Core)

### Work Markers
- `todo` - work to be done
- `fixme` - bugs to fix (replaces `fix`)
- `refactor` - code that needs restructuring
- `review` - needs review
- `wip` - work in progress
- `stub` - skeleton/basic implementation
- `temp` - temporary code
- `done` - completed work
- `deprecated` - scheduled for removal
- `test` - test-specific marker

### Information Markers
- `note` - general note
- `idea` - future possibility
- `about` - explains purpose or context
- `example` - usage example

### Attention Markers
- `notice` - important information (replaces `alert`, `warn`)
- `risk` - potential issue
- `important` - critical context (replaces `always`)

### Top-level Marker
- `tldr` - brief summary (one per file at top)

## Why `:::`?

The `:::` sign was chosen for:
- **Visual clarity**: Clearly separates marker from content
- **Uniqueness**: Unlikely to conflict with existing code
- **Consistency**: One standard across all projects
- **Searchability**: Easy to grep and parse

## AI Agent Workflows

### 1. Human marks location
```python
class UserService:
    # note ::: all emails must be unique
    def create_user(self, email: str):
        # todo ::: @agent implement with validation
        # notice ::: prevent duplicates #security
        pass
```

### 2. AI finds work
```bash
rg ":::.*@agent"
# user_service.py:4: # todo ::: @agent implement with validation
```

### 3. AI reads context
```bash
rg ":::" user_service.py
# user_service.py:2: # note ::: all emails must be unique
# user_service.py:5: # notice ::: prevent duplicates #security
```

### 4. AI implements with understanding

## Migration Strategies

### From TODO comments
```bash
# Phase 1: Enhance existing
sed -i 's/TODO:/TODO :::/g' **/*.js

# Phase 2: Pure waymarks
sed -i 's/TODO :::/todo :::/g' **/*.js
```

### Progressive adoption
1. Start with `todo :::`
2. Add `:::` for pure notes
3. Use `@mentions` for AI
4. Link with `fixes:#123`

## Monorepo Patterns

Use tags for service namespacing:
```javascript
// todo ::: implement OAuth #auth-service
// fixme ::: validate amounts #payment #security
// note ::: maintain compatibility #shared-api
```

Search patterns:
```bash
rg "#auth-service"     # Auth service only
rg ":::.*#security"    # All security issues
```

## Advanced Patterns

### Relational Tags and Signals
```javascript
// todo ::: implement auth #fixes:#123 #deadline:2024-03-01
// !todo ::: @alice fix memory leak    // High priority via signal
```

### Arrays (comma-separated, no spaces)
```javascript
// todo ::: update Node.js #requires:#node-16,#node-18,#node-20
// fixme ::: security vulnerability #affects:#auth,#api,#frontend
```

### Issue Linking (always include # in references)
```python
# todo ::: implement feature #fixes:#123
# fixme ::: security patch #closes:#456  
# done ::: completed OAuth #relates:#AUTH-789
```

### HTML Comments (for markdown)
```markdown
<!-- tldr ::: Quick summary of the document -->
<!-- todo ::: @galligan add more examples -->
<!-- note ::: Essential concept explanation -->
```

## Best Practices

1. **Space before `:::`**: Required when marker is present
2. **Always include `#` in references**: `#fixes:#123` not `#fixes:123`
3. **Use signals for priority**: `!todo` not `#priority:high`
4. **Line limits**: Keep under ~80-120 chars for readable grep output
5. **Be specific**: Clear, actionable descriptions
6. **Use HTML comments in markdown**: `<!-- tldr ::: summary -->` for non-rendered waymarks
7. **Progressive enhancement**: Start simple, add complexity as needed

## Implementation

### VS Code
```json
{
  "todo-tree.regex.regex": "(\\w+) :::"
}
```

### Git hooks
```bash
# Block commits with temporary code
if git diff --cached | grep -q ".*:::.*\\(temp\\|tmp\\)"; then
  echo "Error: Remove temporary waymarks before committing"
  exit 1
fi
```

### CI/CD
Check for critical issues in pull requests.

## Grammar

```ebnf
waymark  ::= [signal] [marker space] ":::" space content
signal   ::= "*" | "!" | "!!" | "?" | "??" | "-" | "--" | "_"
marker   ::= [A-Za-z0-9_-]+
space    ::= " "  # exactly one ASCII space
content  ::= (actor | anchor | tag | note)*
actor    ::= "@" [A-Za-z0-9_-]+  # if first token
anchor   ::= "##" [A-Za-z0-9/_-]+  # if first token
tag      ::= "#" [A-Za-z0-9/_-]+ [":" value]
value    ::= [^#@:,]+ | "@" [A-Za-z0-9_-]+ | "#" [A-Za-z0-9/_-]+
note     ::= [^#@:]+  # any text without special chars
```

## Resources

- [README](https://github.com/outfitter-dev/waymark/blob/main/README.md): Full documentation
- [Examples](https://github.com/outfitter-dev/waymark/blob/main/docs/examples.md): Real-world patterns
- [Conventions](https://github.com/outfitter-dev/waymark/blob/main/docs/conventions/): Prefix patterns
- [Progressive Guide](https://github.com/outfitter-dev/waymark/blob/main/docs/guides/progressive-enhancement.md): Adoption path

## Quick Reference

```bash
# Find all waymarks
rg ":::"

# Find with context
rg -C2 "warn :::"         # 2 lines before/after
rg -B3 -A3 "todo :::"     # 3 lines before, 3 after

# Find in markdown (including HTML comments)  
rg "<!-- .*:::" --type md

# Remove all waymarks (backup first!)
find . -type f -exec sed -i.bak 's/.*:::[^*]*//g' {} +
```

Remember: The goal is discoverability. Start simple, grow naturally. 